# -*- coding: utf-8 -*-
"""Proyek Analisis Data Dicoding.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LBm3oBJycJd2t6cqmIc5-4eB8oRLbg0Q

# Proyek Analisis Data: [Dicoding Proyek 1 Python]
- **Name:** [Deva Cantika]
- **Email:** [devacantika123@gmail.com]
- **ID Dicoding:** [decadren12]

## Defining the Business Question

- What season has the highest bike-sharing rides?
- What time of day is the peak of bicycle borrowing?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

days_df = pd.read_csv("https://raw.githubusercontent.com/devacantika/bike/refs/heads/main/day.csv")
days_df.head()

hour_df = pd.read_csv("https://raw.githubusercontent.com/devacantika/bike/refs/heads/main/hour.csv")
hour_df.head()

"""**Insight:**
- xxx
- xxx

### Assessing Data
"""

days_df.info()

days_df.isna().sum()

print("Total of duplicate: ", days_df.duplicated().sum())

days_df.describe()

hour_df.info()

print("Total of Duplicate: ",hour_df.duplicated().sum())
hour_df.describe()

days_df.describe(include="all")

print(days_df.shape)

"""**insight**
data yang diperoleh menunjukkan
1. day_df
- tipe data : -
- missing value : -
- duplicate data : terdapat 0 data yang duplikat
- inaccurate value : -
2. hour_df
- tipe data : -
- missing value : -
- duplicate data : terdapat 0 data yang duplikat
- inaccurate value : -

### Cleaning Data
"""

#membersihkan data day dan hour
days_df['dteday'] = pd.to_datetime(days_df['dteday'])
hour_df['dteday'] = pd.to_datetime(hour_df['dteday'])

print("\nInformasi akhir days_df setelah pembersihan:")
print(days_df.info())

print("\nInformasi akhir hour_df setelah pembersihan:")
print(hour_df.info())

# find the weekday of each corresponding date
days_df['weekday'] = days_df['dteday'].dt.day_name()
hour_df['weekday'] = hour_df['dteday'].dt.day_name()
print("Days Dataset:")
print(days_df.head(3))

print("\nHour Dataset:")
print(hour_df.head(3))

# Find the month of each corresponding date
days_df['mnth'] = days_df['dteday'].dt.month_name()
hour_df['mnth'] = hour_df['dteday'].dt.month_name()

# Print the first 3 rows of each dataframe
print("Days Dataset with Month Name:")
print(days_df.head(3))

print("\nHour Dataset with Month Name:")
print(hour_df.head(3))

# Replace season integer value with corresponding season name
def find_season(season):
    season_string = {1: 'Winter', 2: 'Spring', 3: 'Summer', 4: 'Fall'}
    return season_string.get(season)

# Replace 'season' column in days_df
days_df['season'] = days_df['season'].apply(find_season)

# Replace 'season' column in hour_df
hour_df['season'] = hour_df['season'].apply(find_season)

# Print the first 3 rows of each dataframe
print("Days Dataset with Season Name:")
print(days_df.head(3))

print("\nHour Dataset with Season Name:")
print(hour_df.head(3))

# Correct the 'yr' column by extracting the year from 'dteday'
days_df['yr'] = days_df['dteday'].dt.year
hour_df['yr'] = hour_df['dteday'].dt.year

# Print the first 3 rows of each dataframe to verify the change
print("Days Dataset with Corrected Year:")
print(days_df.head(3))

print("\nHour Dataset with Corrected Year:")
print(hour_df.head(3))

# Correct the values of temp, atemp, hum, and windspeed to their original scales
days_df['temp'] = days_df['temp'] * 41  # This is Temperature in Celsius
days_df['atemp'] = days_df['atemp'] * 50  # Apparent temperature in Celsius
days_df['hum'] = days_df['hum'] * 100  # Humidity in percentage
days_df['windspeed'] = days_df['windspeed'] * 67  # Windspeed in km/h

hour_df['temp'] = hour_df['temp'] * 41
hour_df['atemp'] = hour_df['atemp'] * 50
hour_df['hum'] = hour_df['hum'] * 100
hour_df['windspeed'] = hour_df['windspeed'] * 67

# Print the Dataset
print("Days Dataset:")
print(days_df[['dteday', 'yr', 'mnth', 'season', 'weekday', 'temp', 'atemp', 'hum', 'windspeed']].head(3))

print("\nHour Dataset:")
print(hour_df[['dteday', 'yr', 'mnth', 'season', 'weekday', 'temp', 'atemp', 'hum', 'windspeed']].head(3))

days_df.to_csv("cleaned_bike_days.csv", index=False)
hour_df.to_csv("cleaned_bike_hour.csv", index=False)

"""## Exploratory Data Analysis (EDA)

### Explore ...
"""

days_df.dtypes

hour_df.dtypes

# Specify a float column in days_df
float_vars = ['temp', 'atemp', 'hum', 'windspeed']
df_float = days_df[float_vars]

# Display the statistical description of the float column
df_float_days.describe()

"""Histogram

This data by days
"""

# Create a figure and 4 subplots
fig, axs = plt.subplots(1, 4, figsize=(15, 5))

# Iterate over the float variables and create a histogram for each one
for i, ax in enumerate(axs):
    sns.histplot(x=df_float_days[float_vars[i]], ax=ax, kde=True, bins=10, color='red')

    # Set the title and labels
    ax.set_title(float_vars[i])
    ax.set_xlabel("")
    ax.set_ylabel("")

# Adjust the layout of the subplots
plt.tight_layout()

# Show the plot
plt.show()

"""Boxplot"""

# Create a figure and 4 subplots
fig, axs = plt.subplots(1, 4, figsize=(15, 5))

# Iterate over the float variables and create a boxplot for each one
for i, ax in enumerate(axs):
    sns.boxplot(y=df_float[float_vars[i]], orient='v', ax=ax, color='red')

    # Set the title and labels
    ax.set_title(float_vars[i])
    ax.set_ylabel("")

# Adjust the layout of the subplots
plt.tight_layout()

# Show the plot
plt.show()

"""
Histogram and Boxplot of bikeusers"""

# Create a figure and 2 subplots
fig, axs = plt.subplots(1, 2, figsize=(15, 5))

# Histogram for count of bike-sharing rides
sns.histplot(days_df['cnt'], kde=True, bins=20, ax=axs[0], color='red')
axs[0].set_title("Count of Bikeshare Rides Histogram")
axs[0].set_xlabel("Count of Rides")
axs[0].set_ylabel("Frequency")

# Boxplot for count of bike-sharing rides
sns.boxplot(y=days_df['cnt'], ax=axs[1], color='red')
axs[1].set_title("Count of Bikeshare Rides Boxplot")
axs[1].set_xlabel("")
axs[1].set_ylabel("Count of Rides")

# Adjust the layout of the subplots
plt.tight_layout()

# Show the plot
plt.show()

"""
Count the number of registered and casual users"""

# Calculate the sum of registered and casual users
registered_sum = days_df['registered'].sum()
casual_sum = days_df['casual'].sum()

# Set the figure size
plt.figure(figsize=(10, 5))

# Create a bar chart using the sns.barplot() function
sns.barplot(x=["Registered", "Casual"], y=[registered_sum, casual_sum], palette=["red", "lightcoral"])

# Add labels and a title to the plot
plt.xlabel("User Type")
plt.ylabel("Total Rides")
plt.title("Total Registered and Casual Rides")

# Show the plot
plt.show()

# Print the total counts
print(f"Count of registered users: {registered_sum}")
print(f"Count of casual users: {casual_sum}")

"""
Time series plot of bike users"""

# Converting the dteday column to datetime data type
days_df['dteday'] = pd.to_datetime(days_df['dteday'])

# Creating figure size
plt.figure(figsize=(16, 6))

# Creating the line plot
sns.lineplot(x="dteday", y="cnt", data=days_df, color='red')

# Adding labels and title
plt.xlabel("Date")
plt.ylabel("Count")
plt.title("Count of Bikeshare Users by Day")

# Displaying the plot
plt.tight_layout()
plt.show()

"""- Trends over Time:
The line plot shows a general upward trend in the number of bike-sharing users from the beginning of 2011 to the end of 2012. This indicates an increase in the popularity or use of bike-sharing programs over time.
- Seasonal Patterns:
There are fluctuations in certain months, indicating a possible seasonal effect. Bicycle usage may increase during spring and summer and decrease in winter.

Boxplot bike user by year
"""

# Assuming days_df is your dataset and it has 'yr' and 'cnt' columns
plt.figure(figsize=(10, 5))

# Create a boxplot using the sns.boxplot() function
sns.boxplot(
    x="yr",
    y="cnt",
    data=days_df,  # Use days_df instead of df
    palette=["blue", "lightcoral"]
)

# Add labels and a title to the plot
plt.xlabel("Year")
plt.ylabel("Total Rides")
plt.title("Count of Bike-Sharing Rides by Year")

# Show the plot
plt.show()

"""Boxplot bike user by season"""

# Assuming days_df is your dataset and it has 'season' and 'cnt' columns
plt.figure(figsize=(10, 5))

# Create a boxplot using the sns.boxplot() function
sns.boxplot(
    x="season",
    y="cnt",
    data=days_df,  # Use days_df instead of df
    palette=["blue", "yellow", "red", "green"]  # Different colors for each season
)

# Add labels and a title to the plot
plt.xlabel("Season")
plt.ylabel("Total Rides")
plt.title("Count of Bike-Share Rides by Season")

# Show the plot
plt.show()

"""boxplot bike user by month"""

# Assuming days_df is your dataset and it has 'mnth' and 'cnt' columns
plt.figure(figsize=(16, 6))

# Create a boxplot using the sns.boxplot() function
sns.boxplot(
    x="mnth",
    y="cnt",
    data=days_df,  # Use days_df instead of df
    palette=["blue", "yellow", "red", "green"]   # Colors for the boxplot
)

# Add labels and a title to the plot
plt.xlabel("Month")
plt.ylabel("Total Rides")
plt.title("Count of Bike-Share Rides by Month")

# Show the plot
plt.show()

"""Boxplot bike user by day"""

# Assuming days_df is your dataset and it has 'weekday' and 'cnt' columns
# Order of the days
day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

plt.figure(figsize=(16, 6))

# Create a boxplot using the sns.boxplot() function
sns.boxplot(
    x="weekday",
    y="cnt",
    data=days_df,  # Use days_df instead of df
    palette=["blue", "yellow", "red", "green"],
    order=day_order  # Specify the order of days
)

# Add labels and a title to the plot
plt.xlabel("Weekday")
plt.ylabel("Total Rides")
plt.title("Count of Bike-Share Rides by Weekday")

# Show the plot
plt.show()

"""Boxplot bike user by hour"""

# Assuming hour_df has columns 'hr' for hour and 'cnt' for count of rides
plt.figure(figsize=(16, 6))

# Create a boxplot using the sns.boxplot() function
sns.boxplot(
    x="hr",  # Hour of the day
    y="cnt",  # Count of rides
    data=hour_df,
    palette=["blue", "yellow", "red", "green"]
)

# Add labels and a title to the plot
plt.xlabel("Hour of Day")
plt.ylabel("Total Rides")
plt.title("Count of Bikeshare Rides by Hour")

# Show the plot
plt.show()

"""## Visualization & Explanatory Analysis

### Question 1: What season has the highest bike-sharing rides?
"""

print("To determine which season has the highest number of bike-sharing rides, we can look at the aggregated counts of rides for each season in the dataset. Typically, seasons are categorized as Winter, Spring, Summer, and Fall.")
print("Analysis: After visualizing the data using boxplots or bar charts, we can compare the total counts of rides across different seasons. If Summer shows the highest total, for instance, it could be due to favorable weather conditions, longer daylight hours, and increased outdoor activities during this time.")

"""### Question 2: What time of day is the peak of bicycle borrowing?"""

print("To identify the peak time for bicycle borrowing, we can analyze the distribution of ride counts by hour of the day (typically represented in a 24-hour format).")
print("Analysis: By using boxplots or line graphs, we can observe the trends in bike-sharing usage throughout the day. Commonly, bike usage might peak during morning commuting hours (7-8 AM) and again in the late afternoon or early evening (5-6 PM).")

"""**Insight:**
The analysis highlights key trends in bike-sharing behavior throughout the seasons and different times of the day. Understanding these patterns can assist in optimizing bike-sharing services, ensuring that there are enough bikes available during peak times, and planning for seasonal promotions or bike maintenance schedules.

## Conclusion

- Conclution Question 1 : Based on the data, it can be concluded that summer has the highest number of bike-sharing rides. This is likely attributed to factors such as warmer temperatures and increased leisure activities typical of this season.
- Conclution Question 2 : From the analysis, it can be concluded that the peak time for bicycle borrowing is 7-8 am and 5-6 pm. This peak is usually observed during commuting hours when people are more likely to rent bikes for work or leisure.
"""
